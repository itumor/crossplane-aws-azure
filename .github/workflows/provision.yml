name: provision

on: [push]

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_DEFAULT_REGION: 'eu-central-1'

jobs:
  provision-kind-with-crossplane:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@master

      - name: Install kind (see https://kind.sigs.k8s.io) & crossplane CLI
        run: |
          brew install kind

          echo "### Install crossplane CLI & check if it's working"
          curl -sL https://raw.githubusercontent.com/crossplane/crossplane/master/install.sh | sh
          sudo mv kubectl-crossplane /usr/local/bin
          kubectl crossplane --help

      - name: Spin up kind cluster & try to use the cluster
        run: |
          kind create cluster --image kindest/node:v1.23.0 --wait 5m

          echo "### Let's try to access our kind cluster via kubectl"
          kubectl get nodes
      
      - name: Install crossplane via Helm
        run: |
          echo "### Create a namespace for crossplane"
          kubectl create namespace crossplane-system

          echo "### Install crossplane via Helm"
          helm repo add crossplane-stable https://charts.crossplane.io/stable
          helm repo update
          helm upgrade --install crossplane --namespace crossplane-system crossplane-stable/crossplane

      - name: Check crossplane status
        run: |
          helm list -n crossplane-system
          kubectl get all -n crossplane-system

          echo "### Wait for crossplane to become ready before installing Providers"
          kubectl wait --for=condition=ready pod -l app=crossplane --namespace crossplane-system --timeout=120s
      
      - name: Configure crossplane to access AWS
        run: |
          echo "### Create aws-creds.conf file"
          echo "[default]
          aws_access_key_id = $(aws configure get aws_access_key_id)
          aws_secret_access_key = $(aws configure get aws_secret_access_key)
          " > aws-creds.conf
          
          echo "### Create AWS Provider secret"
          kubectl create secret generic aws-creds -n crossplane-system --from-file=creds=./aws-creds.conf

          echo "### Install the crossplane AWS Provider"
          kubectl apply -f provider-aws.yaml

          echo "### Wait until AWS Provider is up and running"
          kubectl wait --for=condition=Healthy=True --timeout=120s provider/provider-aws

          echo "### Create ProviderConfig to consume the Secret containing AWS credentials"
          kubectl apply -f provider-config-aws.yaml
